// Generated by CoffeeScript 2.7.0
(function() {
  var $$, $tablature_error, $theme, animate, keyboard_element, keys_container, load_tablature, multi_row_selection_mode_input, overwrite_mode_input, redo_button, ref, scale, scale_midi_values, scale_select, scale_start, scale_start_select, tablature_editor, tablature_presets_select, theme, theme_name, undo_button, update_multi_row_selection_mode, update_overwrite_mode, update_scale_highlighting,
    indexOf = [].indexOf;

  this.song = {
    clear: function() {
      var string_name;
      this.notes = [];
      this.tuning = "eBGDAE"; // backwards
      this.strings = (function() {
        var i, len, ref, results;
        ref = this.tuning;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          string_name = ref[i];
          results.push(`${string_name}|-`);
        }
        return results;
      }).call(this);
      this.pos = 0;
    },
    toJSON: function() {
      return this.notes;
    },
    toString: function() {
      return song.strings.join("\n");
    },
    addNote: function(rec_note) {
      var dashes, i, len, ref, s, string;
      song.notes.push(rec_note);
      
      // @TODO: go through Tablature.stringify()
      dashes = ["", "-", "--", "---", "----"][`${rec_note.f}`.length];
      ref = song.strings;
      for (s = i = 0, len = ref.length; i < len; s = ++i) {
        string = ref[s];
        song.strings[s] += s === rec_note.s ? rec_note.f : dashes;
        song.strings[s] += "-"; // additional dash to space notes apart
      }
      $tablature_error.dismiss();
      tablature_editor.editor.setValue(`${song}`, 1);
      if (song.notes.length === 1) {
        tablature_editor.showPlaybackPosition(song.pos);
      }
    }
  };

  song.clear();

  scale_start = "C";

  scale = teoria.scale(scale_start, "harmonicchromatic");

  scale_select = document.getElementById("scale");

  scale_start_select = document.getElementById("scale-start");

  tablature_presets_select = document.getElementById("tablature-presets");

  // disable_outside_scale_checkbox = document.getElementById("disable-outside-scale")
  multi_row_selection_mode_input = document.getElementById("multi-row-selection-mode");

  overwrite_mode_input = document.getElementById("overwrite-mode");

  undo_button = document.getElementById("undo");

  redo_button = document.getElementById("redo");

  keys_container = document.getElementById("keys");

  keyboard_element = document.getElementById("keyboard");

  scale_midi_values = [];

  this.is_midi_value_in_scale = function(midi_value) {
    var ref;
    return ref = midi_value % 12, indexOf.call(scale_midi_values, ref) >= 0;
  };

  (update_scale_highlighting = function() {
    var scale_name, scale_note, scale_notes;
    scale_name = scale_select.selectedOptions[0].value;
    scale_start = scale_start_select.selectedOptions[0].value;
    if (scale_name === "") {
      scale_notes = [];
    } else {
      scale_notes = teoria.scale(scale_start, scale_name).notes();
    }
    scale_midi_values = (function() {
      var i, len, results;
      results = [];
      for (i = 0, len = scale_notes.length; i < len; i++) {
        scale_note = scale_notes[i];
        results.push(scale_note.midi() % 12);
      }
      return results;
    })();
  })();

  // disable_outside_scale = disable_outside_scale_checkbox.checked
  // disable_outside_scale_checkbox.onchange = (e)->
  // 	disable_outside_scale = e.target.checked
  // 	update_scale_highlighting()
  // 	return
  scale_select.addEventListener("change", update_scale_highlighting);

  scale_start_select.addEventListener("change", update_scale_highlighting);

  tablature_presets_select.addEventListener("change", function(e) {
    var path, xhr;
    path = e.target.value;
    if (path === "") {
      tablature_editor.editor.setValue("");
      return;
    }
    // fetch isn't allowed on file: URI
    // fetch path
    // .catch (err)->
    // 	$tablature_error.message.text("Failed to load #{path}: #{err}")
    // 	tablature_editor.editor.setValue(err.stack)
    // .then (tabs_text)->
    // 	load_tablature(tabs_text)
    xhr = new XMLHttpRequest();
    xhr.addEventListener("error", function(e) {
      return $tablature_error.message.text(`Failed to load ${path}`);
    });
    // tablature_editor.editor.setValue(err.stack)
    xhr.addEventListener("load", function() {
      var tabs_text;
      tabs_text = xhr.responseText;
      return load_tablature(tabs_text);
    });
    xhr.open("GET", path);
    xhr.send();
  });

  this.fretboard = new Fretboard();

  $(fretboard.canvas).appendTo(".fretboard-area");

  $tablature_error = $(".tablature-error");

  $tablature_error.dismiss = function() {
    this.hide().attr("aria-hidden", "true").text("");
  };

  $tablature_error.message = function(message) {
    this.show().attr("aria-hidden", "false").text(message);
  };

  tablature_editor = new TablatureEditor($(".tablature-editor")[0]);

  tablature_editor.showPlaybackPosition(song.pos);

  undo_button.addEventListener("click", function() {
    tablature_editor.editor.undo();
  });

  redo_button.addEventListener("click", function() {
    tablature_editor.editor.redo();
  });

  tablature_editor.editor.on("input", function() {
    var undo_manager;
    undo_manager = tablature_editor.editor.session.getUndoManager();
    undo_button.disabled = !undo_manager.hasUndo();
    return redo_button.disabled = !undo_manager.hasRedo();
  });

  (update_multi_row_selection_mode = function() {
    tablature_editor.multi_row_selection_mode = multi_row_selection_mode_input.checked;
  })();

  multi_row_selection_mode_input.addEventListener("change", update_multi_row_selection_mode);

  (update_overwrite_mode = function() {
    tablature_editor.editor.session.setOverwrite(overwrite_mode_input.checked);
  })();

  overwrite_mode_input.addEventListener("change", update_overwrite_mode);

  tablature_editor.editor.session.on("changeOverwrite", function() {
    overwrite_mode_input.checked = tablature_editor.editor.session.getOverwrite();
  });

  $theme = $(".theme");

  try {
    theme = Fretboard.themes[localStorage.guitar_theme];
    if (theme) {
      fretboard.theme = theme;
    }
  } catch (error1) {}

  ref = Fretboard.themes;
  for (theme_name in ref) {
    theme = ref[theme_name];
    $("<option>").text(theme_name).attr({
      value: theme_name,
      selected: Fretboard.themes[theme_name] === fretboard.theme
    }).appendTo($theme);
  }

  $theme.on("change", function() {
    fretboard.theme = Fretboard.themes[$theme.val()];
    try {
      localStorage.guitar_theme = $theme.val();
    } catch (error1) {}
  });

  (animate = () => {
    fretboard.draw();
    requestAnimationFrame(animate);
  })();

  $$ = $(window);

  $$.on("keyup", function(e) {
    var i, len, ref1, string, sustain;
    if (e.keyCode === 32) { // Spacebar
      sustain = false;
      ref1 = fretboard.strings;
      for (i = 0, len = ref1.length; i < len; i++) {
        string = ref1[i];
        string.release();
      }
    }
  });

  $$.on("keydown", function(e) {
    var PLAYING_ID, chord, chord_note, chord_pos, i, key, len, onkeyup, play, str, sustain;
    key = e.keyCode;
    if (e.altKey) {
      if (typeof console !== "undefined" && console !== null) {
        if (typeof console.log === "function") {
          console.log(key);
        }
      }
    }
    if (e.ctrlKey && key === 65) { // Ctrl+A
      tablature_editor.editor.focus();
      tablature_editor.editor.selection.selectAll();
    }
    if (e.ctrlKey || e.shiftKey || e.altKey || key === 9 || key > ~~100) {
      return;
    }
    if (key === 36) { // Home
      song.pos = 0;
      tablature_editor.showPlaybackPosition(song.pos);
    } else if (key === 32) { // Spacebar
      sustain = true;
    } else {
      if (!e.target.tagName.match(/textarea|input|select/i)) {
        if (fretboard.playing_notes[key]) {
          return;
        }
        play = song.notes[song.pos];
        if (!play) {
          return;
        }
        chord = play.length ? play : [play];
        fretboard.playing_notes[key] = chord;
        chord_pos = song.pos;
        song.pos = (song.pos + 1) % song.notes.length;
        PLAYING_ID = Math.random();
        for (i = 0, len = chord.length; i < len; i++) {
          chord_note = chord[i];
          str = fretboard.strings[chord_note.s];
          str.PLAYING_ID = PLAYING_ID;
          str.play(chord_note.f);
          tablature_editor.showPlayingNote(chord_pos, chord_note);
        }
        $$.on("keyup", onkeyup = function(e) {
          var j, len1;
          if (e.keyCode === key) {
            for (j = 0, len1 = chord.length; j < len1; j++) {
              chord_note = chord[j];
              str = fretboard.strings[chord_note.s];
              if (str.PLAYING_ID === PLAYING_ID) {
                str.release();
              }
              tablature_editor.removePlayingNote(chord_pos, chord_note);
            }
            delete fretboard.playing_notes[key];
            $$.off("keyup", onkeyup);
            tablature_editor.showPlaybackPosition(song.pos);
          }
        });
      }
    }
  });

  $$.on("blur", function() {
    var i, len, ref1, results, string;
    ref1 = fretboard.strings;
    results = [];
    for (i = 0, len = ref1.length; i < len; i++) {
      string = ref1[i];
      results.push(string.stop());
    }
    return results;
  });

  // @TODO: maybe listen for change and indicate that you need to unfocus it to update
  // or better yet just conditionally show a button
  tablature_editor.editor.on("blur", function() {
    var text;
    text = tablature_editor.editor.getValue();
    load_tablature(text);
  });

  load_tablature = function(text) {
    var error, index, position, res;
    if (text !== `${song}` && text) {
      try {
        res = Tablature.parse(text.replace(/\ <</g, ""));
      } catch (error1) {
        error = error1;
        if (error.blocks) {
          $tablature_error.message(error.message_only);
          tablature_editor.editor.setValue(error.blocks, -1);
          index = error.blocks.indexOf(error.misaligned_block);
          if (index !== -1) {
            position = tablature_editor.editor.getSession().getDocument().indexToPosition(index);
            tablature_editor.editor.scrollToRow(position.row);
          }
        } else {
          $tablature_error.message(error.message);
        }
      }
      if (res) {
        song.clear();
        song.notes = res;
        song.strings = Tablature.stringify(res).split("\n");
        $tablature_error.dismiss();
        tablature_editor.editor.setValue(`${song}`, -1);
        tablature_editor.showPlaybackPosition(song.pos);
      }
    } else {
      $tablature_error.dismiss();
    }
  };

}).call(this);
