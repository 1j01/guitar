// Generated by CoffeeScript 2.7.0
(function() {
  var Range, event;

  ({Range} = ace.require('ace/range'));

  event = require('ace/lib/event');

  this.TablatureEditor = class TablatureEditor {
    constructor(element) {
      var get_lines, isSamePoint, lines_are_uneven, rectSel, selection;
      this.multi_row_selection_mode = true;
      this.editor = ace.edit(element);
      this.editor.getSession().setMode('ace/mode/ocaml');
      this.editor.setOption('highlightActiveLine', false);
      this.editor.setOption('showPrintMargin', false);
      this.editor.setOption('showGutter', false);
      // setAnimatedScroll
      this.editor.commands.bindKey('Tab', null);
      this.editor.commands.bindKey('Shift-Tab', null);
      this.editor.$blockScrolling = 2e308;
      
      // tuning = "eBGDAE"

      // @editor.session.gutterRenderer =
      // 	getWidth: (session, lastLineNumber, config)->
      // 		config.characterWidth
      // 	getText: (session, row)->
      // 		tuning[row] ? ""
      this.column_highlight_markers = [];
      this.playing_note_highlight_markers = {};
      this.positions = [];
      get_lines = () => {
        var lines, tablature;
        tablature = this.editor.getValue();
        return lines = tablature.split(/\r?\n/);
      };
      lines_are_uneven = (lines) => {
        return lines.some(function(line) {
          return line.length !== lines[0].length;
        });
      };
      this.editor.on("change", () => {
        var column, column_has_digit, last_column_had_digit, lines;
        this.positions = [];
        lines = get_lines();
        if (lines_are_uneven(lines)) {
          this.hidePlaybackPosition();
          return;
        }
        last_column_had_digit = false;
        column = 0;
        while (column < lines[0].length) {
          column_has_digit = lines.some(function(line) {
            return line[column].match(/\d/);
          });
          if (column_has_digit && !last_column_had_digit) {
            this.positions.push(column);
          }
          last_column_had_digit = column_has_digit;
          column++;
        }
      });
      
      // The following is based on the default multi-selection block selection code:
      // https://github.com/ajaxorg/ace/blob/master/lib/ace/mouse/multi_select_handler.js
      // @TODO: move this somewhere? there's more interesting code after it
      isSamePoint = function(p1, p2) {
        return p1.row === p2.row && p1.column === p2.column;
      };
      rectSel = [];
      ({selection} = this.editor);
      this.editor.on("mousedown", (e) => {
        var blockSelect, button, cursor, initialRange, mouseX, mouseY, onMouseSelection, onMouseSelectionEnd, onSelectionInterval, pos, screenAnchor, screenCursor, session, timerId;
        button = e.getButton();
        if (!(button === 0 && this.multi_row_selection_mode)) {
          return;
        }
        if (lines_are_uneven(get_lines())) {
          return;
        }
        e.stop();
        pos = e.getDocumentPosition();
        [mouseX, mouseY] = [e.x, e.y];
        onMouseSelection = (e) => {
          mouseX = e.clientX;
          return mouseY = e.clientY;
        };
        session = this.editor.getSession();
        screenAnchor = this.editor.renderer.pixelToScreenCoordinates(mouseX, mouseY);
        screenAnchor.row = 0; // tablature!
        cursor = session.screenToDocumentPosition(screenAnchor.row, screenAnchor.column);
        screenCursor = screenAnchor;
        this.editor.inVirtualSelectionMode = true;
        initialRange = null;
        rectSel = [];
        blockSelect = () => {
          var newCursor;
          newCursor = this.editor.renderer.pixelToScreenCoordinates(mouseX, mouseY);
          newCursor.row = 5; // tablature!
          cursor = session.screenToDocumentPosition(newCursor.row, newCursor.column);
          if (isSamePoint(screenCursor, newCursor) && isSamePoint(cursor, selection.lead)) {
            return;
          }
          screenCursor = newCursor;
          this.editor.$blockScrolling++;
          this.editor.selection.moveToPosition(cursor);
          this.editor.renderer.scrollCursorIntoView();
          this.editor.removeSelectionMarkers(rectSel);
          rectSel = selection.rectangularRangeBlock(screenCursor, screenAnchor);
          if (this.editor.$mouseHandler.$clickSelection && rectSel.length === 1 && rectSel[0].isEmpty()) {
            rectSel[0] = this.editor.$mouseHandler.$clickSelection.clone();
          }
          rectSel.forEach(this.editor.addSelectionMarker, this.editor);
          this.editor.updateSelectionMarkers();
          this.editor.$blockScrolling--;
        };
        this.editor.$blockScrolling++;
        this.editor.selection.moveToPosition(cursor);
        this.editor.renderer.scrollCursorIntoView();
        this.editor.removeSelectionMarkers(rectSel);
        rectSel = selection.rectangularRangeBlock(screenCursor, screenAnchor);
        if (this.editor.$mouseHandler.$clickSelection && rectSel.length === 1 && rectSel[0].isEmpty()) {
          rectSel[0] = this.editor.$mouseHandler.$clickSelection.clone();
        }
        rectSel.forEach(this.editor.addSelectionMarker, this.editor);
        this.editor.updateSelectionMarkers();
        this.editor.$blockScrolling--;
        screenCursor = {
          row: -1,
          column: -1
        };
        onMouseSelectionEnd = (e) => {
          var j, len, range;
          clearInterval(timerId);
          this.editor.removeSelectionMarkers(rectSel);
          if (!rectSel.length) {
            rectSel = [selection.toOrientedRange()];
          }
          this.editor.$blockScrolling++;
          if (initialRange) {
            this.editor.removeSelectionMarker(initialRange);
            selection.toSingleRange(initialRange);
          }
          for (j = 0, len = rectSel.length; j < len; j++) {
            range = rectSel[j];
            selection.addRange(range);
          }
          this.editor.inVirtualSelectionMode = false;
          this.editor.$mouseHandler.$clickSelection = null;
          this.editor.$blockScrolling--;
        };
        onSelectionInterval = blockSelect;
        event.capture(this.editor.container, onMouseSelection, onMouseSelectionEnd);
        timerId = setInterval(onSelectionInterval, 20);
        e.preventDefault();
      });
    }

    showPlayingNote(pos, note) {
      var column, key, marker, range;
      this.removePlayingNote(pos, note);
      key = `${note.s}:${pos}`;
      column = this.positions[pos];
      range = new Range(note.s, column, note.s, column + 1);
      marker = this.editor.getSession().addMarker(range, "playing-note", "text"); // text?
      this.playing_note_highlight_markers[key] = marker;
    }

    removePlayingNote(pos, note) {
      var existing_marker, key;
      key = `${note.s}:${pos}`;
      existing_marker = this.playing_note_highlight_markers[key];
      if (existing_marker) {
        this.editor.getSession().removeMarker(existing_marker);
      }
    }

    showPlaybackPosition(pos) {
      var column, i, marker, range;
      column = this.positions[pos];
      this.hidePlaybackPosition();
      this.column_highlight_markers = (function() {
        var j, results;
        results = [];
        for (i = j = 0; j <= 6; i = ++j) {
          range = new Range(i, column - 1, i, column);
          marker = this.editor.getSession().addMarker(range, "playback-position", "text"); // text?
          results.push(marker);
        }
        return results;
      }).call(this);
    }

    
      // @TODO: scroll the playback position into view
    // @editor.revealRange range
    // pageX_1 = @editor.renderer.textToScreenCoordinates(0, 0).pageX
    // pageX_2 = @editor.renderer.textToScreenCoordinates(column, 0).pageX
    // console.log pageX_1, pageX_2
    // delta_pageX = pageX_2 - pageX_1
    // @editor.renderer.scrollToX column * delta_pageX
    // @editor.renderer.scrollToX column * 7
    hidePlaybackPosition() {
      var j, len, marker, ref;
      ref = this.column_highlight_markers;
      for (j = 0, len = ref.length; j < len; j++) {
        marker = ref[j];
        this.editor.getSession().removeMarker(marker);
      }
      this.column_highlight_markers = [];
    }

  };

}).call(this);
